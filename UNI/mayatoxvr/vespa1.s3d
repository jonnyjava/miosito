// Global scene parameters

SET SCENE_FOV = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR = 1000;

// Needed includes 

#include <Script3d.h>
#include <GLConst.h>
#include <Impulse.h>

// Global variables

// Camera globals
var CamDir = [0,0,-1];		//camera direction
var CamPos = [0.0,5.0,30.0];  	//camera position

// Light globals
var Luce;
var PosL = [0.0,10.0,0.0];	//default light position

var istante = 0;

//Mesh
var	M_vespa1;

//Obj
var	O_vespa1;

// Function declarations
function CameraMoveMouse();
function DrawGrid();
function Selection(compID);

#define PAUSE 0
#define FWD  1
#define RWD  2
#define FWDSTEP  3
#define RWDSTEP  4
#define STEPREW  5
#define STEPFFW  6
var i=0;
var play = PAUSE;
var avanti = false;
var indietro = false;
var avantidiuno = false;
var indietrodiuno = false;

function OnDownload()
{
	FileDownload("vespa1.zip");
	// TO DO		
}

function OnInit(params)
{
	// Camera
	SetCameraPosition(CamPos);

	// Light
	Luce = NewLight();
	Luce.SetDiffuse(1,1,1);
	Luce.Enable();	

	// Light initial position
	Luce.SetPosition(PosL);

	//Init Mesh and Obj
	
	O_vespa1 = CVmCharacter("vespa1.aam");
	O_vespa1.Rotate(-90,1,0,0);


	//TO DO
}

function OnFrame()
{
	// Camera manager
	CameraMoveMouse();
		SceneBegin();
		DrawGrid();
		O_vespa1.Draw();
		
		var indata = DataIn();	
		if (indata != "" && indata != " ")	
{
			if(indata == "0") 		
				play = PAUSE;
				 
			if(indata == "1") 		
				play = FWD;
			
			if(indata == "2") 		
				play = RWD;

			if(indata == "3") 		
				play = FWDSTEP;
				avanti = true;
			
			if(indata == "4") 		
				play = RWDSTEP;
				indietro= true;
				
			if(indata == "5") 		
				play = STEPFFW;
				avantidiuno = true;
			
			if(indata == "6") 		
				play = STEPREW;
				indietrodiuno = true;
		}		
			// Come ho fatto sopra, è più leggibile, mentre dire play = val (indata) è molto più compatto ed elegante...a te la scelta						 
		
		if (play == FWD)
		{
			i++;
			if (i>320) i = 0;			
			}
		
		if (play == RWD)
		{	i--;
			if (i<0) i = 320;			
			}
			
		if (play == FWDSTEP && avanti==true)
		{ 	i =  i + 10;	
			avanti = false;
		}
		
		if (play == RWDSTEP && indietro==true)
		{	i = i - 10;
			indietro = false;			
		}
		
		if (play == STEPFFW && avantidiuno==true)
		{ 	i =  i + 1;	
			avantidiuno = false;
		}
		
		if (play == STEPREW && indietrodiuno==true)
		{	i = i - 1;
			indietrodiuno = false;			
		}		
		O_vespa1.DrawAbs(i);	// QUesto può stare fuori da tutti gli if, tanto va disegnato comunque
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*		var id = -1;
	var sel = false;
//	sel = Selection(o_madonna[modelID], &id);
	sel = Selection(&id);
	// TO DO
	var modelID = 0;

			
	if (sel)
	{ 
		var message = str(modelID) + ";" + str (id);
		DataOut(message);
	}
	else
	{
		DataOut("");
	}*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		SceneEnd();
}	
		
function DownloadReady( RequestID )
{
	// TO DO
}



function OnTimer()
{
	// TO DO
}



function OnExit()
{
	// TO DO
}



// Camera manager (using mouse)
function CameraMoveMouse()
{
	static var InMouseR = false, InMouseL = false;				
	static var PrecX = 0, PrecY = 0;			
	if (Mouse.ButtonL)
	{
		if (InMouseL)
		{	
			CameraRotate( (Mouse.X - PrecX)/100.0, 0,1,0 );
			CamPos = GetCameraPosition();
			CamDir = GetCameraDirection(); 
			CamPos = CamPos - CamDir*((Mouse.Y - PrecY)/100.0);
			SetCameraPosition(CamPos);
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseL = true;		
	}
	else
		InMouseL = false;

	if (Mouse.ButtonR)
	{
		if (InMouseR)
		{
			CamPos = GetCameraPosition();
			CamPos[1] = CamPos[1]+( PrecY - Mouse.Y)/100.0;
			SetCameraPosition( CamPos );
		}
		else
		{
			PrecX = Mouse.X;
			PrecY = Mouse.Y;
		}
		InMouseR = true;
	}
	else
		InMouseR = false;

}

// Draws a grid
function DrawGrid()
{
	var i;
	glLineWidth(1);
	
	glDisable(GL_LIGHTING);
	glColor(0.5,0.5,0.5);
	
	glBegin(GL_LINES);
	for( i= -100; i<=100; i+=10 )
	{
		glVertex(i, 0,  100 );
		glVertex(i, 0, -100 );
		
		glVertex( 100, 0, i );
		glVertex(-100, 0, i );
	}
	glEnd();
}/*
function Selection(compID)
//-------------------------------------------
{
	var retval;	
	var viewport = array(4);
	var winx,winy;

	static var p0 = [0.0,0.0,0.0];
	static var p1 = [0.0,0.0,0.0];
	var pInt = [0.0,0.0,0.0];
	var nrml = [0.0,0.0,0.0];
	var n_tr;	
	var vr_obj = o_vespa1;// questa è da cambiare con boh!!!

	
	viewport = glget(GL_VIEWPORT);
	
	winx = Mouse.X;						//x*1.0f/width;
	winy = viewport[3] - 1 - Mouse.Y;	//1.0f - y*1.0f/height;

	var vec0 = [0.0,0.0,0.0];
	var vec1 = [0.0,0.0,0.0];
	vec0[0] = winx;
	vec0[1] = winy ;
	vec0[2] = 0.0;
	vec1[0] = winx;
	vec1[1] = winy ;
	vec1[2] = 1.0;
	
	p0 = gluUnProject(vec0);
	p1 = gluUnProject(vec1);
	
	if ( vr_obj.IsColliding(p0, p1, &pInt, &nrml, &n_tr, &compID) )	
	{
		retval = true;
		if (compID == -1 && vr_obj.GetMesh() !=  VOID)
		compID = vr_obj.GetMesh().GetSubSetFromTriIndex(n_Tr); //qui mi dà l'ID
	 
	}
	else
		retval = false;

	return retval;
}
*/